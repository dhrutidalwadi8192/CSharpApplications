// <auto-generated />
using System;
using FinalExamDhrutiben;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalExamDhrutiben.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalExamDhrutiben.Book", b =>
                {
                    b.Property<int>("bookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookID"), 1L, 1);

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bookID");

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            bookID = 1,
                            author = "Dr. APJ Abdul Kalam",
                            isAvailable = true,
                            title = "Wings of Fire"
                        },
                        new
                        {
                            bookID = 2,
                            author = "Dalai Lama",
                            isAvailable = true,
                            title = "The art of happiness"
                        },
                        new
                        {
                            bookID = 3,
                            author = "Damon Zahariades",
                            isAvailable = true,
                            title = "The art of letting go"
                        });
                });

            modelBuilder.Entity("FinalExamDhrutiben.BookIssue", b =>
                {
                    b.Property<int>("bookIssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookIssueID"), 1L, 1);

                    b.Property<int>("bookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("memberID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("returnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("bookIssueID");

                    b.HasIndex("bookID");

                    b.HasIndex("memberID");

                    b.ToTable("bookIssue");
                });

            modelBuilder.Entity("FinalExamDhrutiben.Member", b =>
                {
                    b.Property<int>("memberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("memberID"), 1L, 1);

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("memberID");

                    b.HasIndex("userID");

                    b.ToTable("members");
                });

            modelBuilder.Entity("FinalExamDhrutiben.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"), 1L, 1);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            userID = 1,
                            password = "Admin@123",
                            role = "Admin",
                            userName = "admin"
                        });
                });

            modelBuilder.Entity("FinalExamDhrutiben.BookIssue", b =>
                {
                    b.HasOne("FinalExamDhrutiben.Book", "book")
                        .WithMany("bookIssues")
                        .HasForeignKey("bookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalExamDhrutiben.Member", "member")
                        .WithMany("bookIssues")
                        .HasForeignKey("memberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("member");
                });

            modelBuilder.Entity("FinalExamDhrutiben.Member", b =>
                {
                    b.HasOne("FinalExamDhrutiben.User", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalExamDhrutiben.Book", b =>
                {
                    b.Navigation("bookIssues");
                });

            modelBuilder.Entity("FinalExamDhrutiben.Member", b =>
                {
                    b.Navigation("bookIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
